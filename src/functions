#!/usr/bin/env bash

# Print the message/inser to the log file
# Input $1: type [STEP (for one of the main steps), DET (for detailed info), ERR (for error), NOTE ( for note), DONE (success confirmation)]
# Input $2: title
# Input $3: value (only for type [DET, ERR])
# Input $4: State [SUCC, FAIL]
function logPrint {
    # Init input variables
    local __type=$1
    local __title=$2
    local __value=$3

    # Step heading
    if [ "${__type}" = "STEP" ]; then
        sleep 1; ((STEP_COUNT++)); local __terminal_width=$(tput cols); tput clear;
        printf "${FG_DEFAULT_COLOR}"'=%.0s' $(seq 1 ${__terminal_width}); printf "${END}"'\n'
        echo -e "${STEP}[STEP:$STEP_COUNT/$TOTALSTEPS] ${__title}...${END}";
        printf "${FG_DEFAULT_COLOR}"'=%.0s' $(seq 1 ${__terminal_width}); printf "${END}"'\n'

    # Sub-Step heading
    elif [ "${__type}" = "SUBSTEP" ]; then
        echo -ne "${SUBSTEP}${__title}...${END}\r"

    # Detailed info
    elif [ "${__type}" = "DET" ]; then
        local __new__title="${__title}"
        local __state=$4; [ ${#__title} -gt 28 ] && __new__title="${__title:0:25}..."
        local __msg=$(printf '\t%-28s' "${__new__title}")
        printf '%-42s' "$__msg .........."
        echo -e "${__state}${__value}${END}";

    # Success confirmation
    elif [ "${__type}" = "DONE" ]; then
        echo
        echo -e "${DONE}${__title}${END}";

    # Error and exit
    elif [ "${__type}" = "ERR" ]; then
        echo
        echo -e "${ERR}${__title}...[${__value}]${END}";
        toLog "${__type}" "${__title} [${__value}]"
        exitAll 2

    # Warning
    elif [ "${__type}" = "WARN" ]; then
        echo
        echo -e "${WARN}${__title}...[${__value}]${END}";

    # Info
    elif [ "${__type}" = "NOTE" ]; then
        echo
        echo -e "${NOTE}${__title}${END}";

    # Default
    else
        echo
        echo -e "${NOTE}${__title}${END}";
    fi

    # Insert to log file
    toLog "${__type}" "${__title} [${__value}]"
}

# Check OS, Distro and kernel
# Input $1: array with the Distro
function checkOs {
    [ "${SKIPSYSC}" = "true" ] && return 0;

    local __distro_checkOS
    local __release_checkOS
    local __kernel_checkOS
    local __arch_checkOS

    local __state="${SUCC}"
    local __failed

    logPrint "STEP" "Checking OS"
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        getOSInfo __distro_checkOS __release_checkOS __kernel_checkOS __arch_checkOS

        # Check distro name
        (isSupported "os_support|os" "${__distro_checkOS}") && __state="${SUCC}" || { __state="${FAIL}"; __failed="NSDISTRO"; }
        logPrint "DET" "OS" "${__distro_checkOS}" "${__state}"

        # Check Release version
        (isSupported "os_support|${__distro_checkOS}|release" "${__release_checkOS}") && __state="${SUCC}" || { __state="${FAIL}"; [ -z "$__failed" ] && __failed="NSREL"; }
        logPrint "DET" "RELEASE" "${__release_checkOS}" "${__state}"

        # Check just Kernel and major revision
        local __kernel_version="${__kernel_checkOS%%.*}"
        local __major_revision="${__kernel_checkOS#*.}"
        __major_revision="${__major_revision%%.*}"

        __state="${SUCC}"
        (isSupported "os_support|${__distro_checkOS}|kernel|${__release_checkOS}|version" "${__kernel_version}.${__major_revision}") && __state="${SUCC}" || { __state="${FAIL}"; [ -z "$__failed" ] && __failed="NSKERNEL"; }
        logPrint "DET" "KERNEL" "${__kernel_checkOS}" "${__state}"

        # Just print the current Arch
        logPrint "DET" "ARCH" "${__arch_checkOS}" "${SUCC}"
    else
        logPrint "ERR" "OS Not Supported!" "$OSTYPE" "${FAIL}"
    fi

    case "$__failed" in
        "NSDISTRO") logPrint "ERR" "OS distro Not Supported!" "${__distro_checkOS}" "${FAIL}" ;;
        "NSREL")    logPrint "ERR" "OS release Not Supported!" "${__release_checkOS}" "${FAIL}" ;;
        "NSKERNEL") logPrint "WARN" "OS kernel Not Supported!" "${__kernel_checkOS}" "${FAIL}"

                # Get the recommended kernel and Update kernel
                local __default_kernel=()
                    getYAMLValue "os_support|${__distro_checkOS}|kernel|${__release_checkOS}|default" YAML_ARRAY __default_kernel
                    updateKernel "${__distro_checkOS}" "${__kernel_checkOS}" "${__arch_checkOS}" "${__default_kernel[0]}" ;;
        *) # Do nothing ;;
    esac
}

# Convert string from ">=4.13 <=4.18" to array like [4.13, 4.14, 4.15, 4.16, 4.17, 4.18]
# Input $1: string to convert
function str2ArrayRange {
    local __str=$1
    local __s='[[:space:]]*'
    local __digit='[0-9.]*'
    local __conversation_type="SEQ" # Params are SEQ (for sequence) and SPT (for split)

    [[ "${__str}" == *'>='*'<='* ]] && __conversation_type="SEQ" || __conversation_type="SPT"

    if [[ "$__conversation_type" == "SEQ" ]]; then
        echo $__str | sed -n 's|^.*>='$__s'\('$__digit'\)[[:space:]]<='$__s'\('$__digit'\).*|\1-\2|p' |
                      awk 'BEGIN{FS="-";}{for (i=$1; i<$2; i+=0.01) { print(i); }}'
    elif [[ "$__conversation_type" == "SPT" ]]; then
        echo $__str | sed 's| ||g' | awk '{ split($0,a,"|"); for (item in a){ print(a[item]);} }'
    fi
}

# Check if value exists in the supported array items
# Input $1: Key to look for in array
# Input $2: Value to check if it supported
function isSupported {
    local __key=$1
    local __val=$2
    local __ret_array=()
    local __index=-1

    getYAMLValue "${__key}" YAML_ARRAY __ret_array

    # Check if __ret_array needs to be interept (If sym. like >=, <=, <, etc.)
    if [[ "${__ret_array[0]}" == *'>='*'<='* || "${__ret_array[0]}" == *'|'* ]]; then
        __ret_array=$(str2ArrayRange "${__ret_array[0]}")
        IFS=$'\r\n' eval  __ret_array='(${__ret_array})'
    fi

    (isInArray "__ret_array" "${__val}" __index) && return 0;
    return 1;
}

# Check if the required dependencies are installed
# Input $1: array with the name of deps
# Input $2: array with the version of deps
# Input $3: title (Optional)
function checkDeps {
    local -n __name_array_checkDeps=$1
    local -n __ver_array_checkDeps=${2:-EMPTY_ARRAY}
    local __title_checkDeps=${3:-"Verifying Dependencies"}

    local __idx=0
    local __dep_toInstall
    local __dep_array_toInstall=() # Array of deps
    local __pkg_name_checkDeps

    logPrint "STEP" "${__title_checkDeps}"
    for dep in "${__name_array_checkDeps[@]}"; do
        [ -z "${dep}" ] && continue || { __pkg_name_checkDeps=("${dep%%:*}"); __dep_toInstall="${dep}"; }
            
        # Get Version
        local __version="${__ver_array_checkDeps[$__idx]}"
        [ ! -z "$__version" ] && [ "$__version" != "latest" ] && __dep_toInstall+="=${__version}"

        if isPrgInstalled "${__dep_toInstall}"; then
            logPrint "DET" "${__pkg_name_checkDeps}" "${CLEAR}Found" "${SUCC}"
        else
            __dep_array_toInstall+=("${__dep_toInstall}")
            logPrint "DET" "${__pkg_name_checkDeps}" "Not Found!" "${FAIL}"
        fi
       ((__idx++))
    done

    eval  __name_array_checkDeps='(${__dep_array_toInstall[@]})'
    [ "${#__dep_array_toInstall[@]}" -ne 0 ] && logPrint "NOTE" "The above not installed packages are required to complete this setup."
}

# Read and parse yaml file
# Input $1: yaml date
# Note: this parser support only the syntax needed. Flow Styles are not supported
function parse_yaml {
    local __data=$1
    local __s='[[:space:]]*'
    local __w='[a-zA-Z0-9_.]*'
    local __fs=${__fs:-$(echo @|tr @ '\034')}
    local __q=''\"\'''
    local __sep=\"\|\"
    local __br_eq=\":=\"

    local __rm_bl='/^$/d' # rm black lines
    local __rm_sp='s|'$__s'$||g;' # rm spaces at the end of the lines
    local __rm_doc_begin='s|^'$__s'\(---\)'$__s'||g' # rm doc begin
    local __rm_doc_end='s|^'$__s'\(\.\.\.\)'$__s'||g' # rm doc end


    local __rm_cmt='s|^'$__s'#.*||g' # rm line begin with #
    local __rm_il_cmt='/#['$__q']/!s|[[:space:]]#.*||g' # rm inline comment
    local __get_item_list='s|^\('$__s'\)-'$__s'\('$__w'\)'$__s':'$__s'\(.*\)'$__s'$|\1'$__fs'\2'$__fs'\3|g' # - key: value
    local __get_map_list='s|^\('$__s'\)\('$__w'\)'$__s'[:-]'$__s'\(.*\)'$__s'$|\1'$__fs'\2'$__fs'\3|g' # map detection key: value, key: 'value', key: "value"


    echo "$__data" | \
        sed -e "$__rm_sp" -e "$__rm_doc_begin" -e "$__rm_doc_end" -e "$__rm_cmt" -e "$__rm_il_cmt" -e "$__rm_bl" -e "$__get_item_list" -e "$__get_map_list" | \

    awk -F$__fs 'BEGIN{
        last_indent = 0; br_count = 0;
    }
    {
        #The suggested syntax for YAML files is to use 2 spaces for indentation
        indent = length($1)/2;


        # extract the dictionarie key
        if(length($2)!= 0){node[indent] = $2}

        # extract the value
        value= (length($3)!= 0)? $3: "null";

        # reinit child elements
        if(indent < last_indent){for(i=indent+1; i <= last_indent; i++){delete node[i]; idx[i]=0;}}
        last_indent = indent;

        br=""; for (i=0; i<indent; i++) {br=(br)(node[i])('$__sep')}
        branch=br node[indent];


        # remove the last char
        if(length(node[indent]) == 0){branch = substr(branch, 1, length(branch)-1)}

        # Check if branch already exists
        # update if true; else insert new value
        isBrExists = 0;
        for(i in br_array){
            split(br_array[i], tmp_br, '$__br_eq');

            if(branch == tmp_br[1]){
                br_array[i] = branch '$__br_eq' tmp_br[2]";"value;
                isBrExists = 1;
            }
        }

        if(isBrExists == 0){
            # put valid branch in array
            if(value != "null"){
                br_array[br_count] = branch '$__br_eq' value;
                br_count++;
            }
        }
    }END{
        for(i=0; i<=br_count; i++){print(br_array[i]);}
    }'
}

# Prepare requirement file before parsing
# Read yaml file and binds the child files
# Input $1: yaml file name
function prepareReqFile {
    local __file_name=$1
    local __s='[[:space:]]*'
    local __fm="- "
    local __fd=": "
    local __rm_doc_begin='s|^'$__s'\(---\)'$__s'||g' # rm doc begin
    local __rm_doc_end='s|^'$__s'\(\.\.\.\)'$__s'||g' # rm doc end
    local __inr_sp='s|^|    |g' # insert the spaces for indentation
    local __req_file_path=""

    # Make Sanity Check
    fileSanityCheck $__file_name

    while IFS= read -r  line
    do
        __req_file_path=""

        #Get file name if exists
        __req_file_path=$(echo $line | awk -F"$__fm|$__fd" '{if($2 == "req_file"){print($3);}}')

        if [ ! -z "${__req_file_path}" ]; then
            __req_file_path="requirements/$__req_file_path"
            fileSanityCheck "$__req_file_path"
            cat "$__req_file_path" | \
            sed -e "$__inr_sp" -e "$__rm_doc_begin" -e "$__rm_doc_end"
        else
            printf '%s\n' "$line"
        fi
    done < "$__file_name"
}

# Parser yaml file into array
# Input $1: yaml file name
# Output $2: Return Array
function yaml2arr {
    local __yaml_file=$1
    local __ret_array=$2
    local __yaml_data

    # Prepare Requirement file
    __yaml_data=$(prepareReqFile $__yaml_file)

    local __array=$(parse_yaml "${__yaml_data}")
    IFS=$'\r\n' eval  $__ret_array='(${__array})'
    #echo "${__array[@]}"; exit
}

# Get value yaml value by key
# Input $1: Key
# Input $2: YAML_Array Ref
# Output $3: Return Array
function getYAMLValue {
    local __key=$1
    local -n __ref_yaml_array=$2
    local __ref_yaml_val_array="$3"
    local __yaml_array=()

    if isInArray "__ref_yaml_array" "${__key}:=" INDEX; then
        local __value="${__ref_yaml_array[$INDEX]#*:=}" # get the value part
        local __yaml_array_item

        IFS=$';' eval __yaml_array='(${__value})'

        # interpret value if required
        for ((i=0; i<"${#__yaml_array[@]}"; i++)); do
            __yaml_array_item="${__yaml_array[i]}"
            [[ "${__yaml_array_item}" == *'`'* ]] && eval __yaml_array[i]="${__yaml_array_item}" || __yaml_array[i]="${__yaml_array_item}"
        done
        eval $__ref_yaml_val_array='(${__yaml_array[@]})'

        return 0;
    else
        logPrint "ERR" "No value Found with this key!" "$__key" "${FAIL}"
        return 1;
    fi
}

# Check if array contains value
# Input $1: Array Ref
# Input $2: Vaue/Key
# Output $3: item index
function isInArray {
    local -n __ref_in_array=$1
    local __key=$2
    local __idx=$3
    local __index=0

    for item in "${__ref_in_array[@]}"; do
        if [[ "${item}" == "${__key}"* ]] ; then
            eval $__idx="'$__index'"
            return 0;
        fi
        ((__index++))
    done
    return 1;
}

# Remove package and the corresponding version from array
# Input $1: pkg name
# Input $2: pkg name array
# Input $3: pkg version array
function removeFromArray {
    local __pkg_name_removeFromArray=$1
    local -n __pkg_name_array_removeFromArray=$2
    local -n __pkg_vers_array_removeFromArray=$3
    local __index=0

    for item in "${__pkg_name_array_removeFromArray[@]}"; do
        if [[ "${item}" == "${__pkg_name_removeFromArray}"* ]] ; then
            __pkg_name_array_removeFromArray=("${__pkg_name_array_removeFromArray[@]:0:$__index}" "${__pkg_name_array_removeFromArray[@]:$__index+1}")
            __pkg_vers_array_removeFromArray=("${__pkg_vers_array_removeFromArray[@]:0:$__index}" "${__pkg_vers_array_removeFromArray[@]:$__index+1}")

            [ $__index -gt 0 ] && ((__index--))
        fi
        ((__index++))
    done

    eval __pkg_name_array_removeFromArray="(${__pkg_name_array_removeFromArray[@]})"
    eval __pkg_vers_array_removeFromArray="(${__pkg_vers_array_removeFromArray[@]})"
}

# Get OS and Version
# Return OS, Version, Kernel and the Architecture
function getOSInfo {
    # Init output variables
    local __res_os=$1
    local __res_ver=$2
    local __res_kernel=$3
    local __res_arch=$4
    local __digit='[0-9]*'

    local __OS
    local __VER
    local __ARCH
    local __KERNEL=$(uname -r)

    if [ -f /etc/centos-release ]; then #Use this to get the right COS version X.X
        __OS="CentOS"
        __VER=$(cat /etc/centos-release | sed 's|^.*[^0-9]\('$__digit'\.'$__digit'\)\(\.[0-9]*\).*$|\1|g')
	__KERNEL=$(yum info kernel -q | grep Version | sed "s/[^0-9^.]//g" | head -1)
	__arch_flag="el.x86_64"
	VER1=7.8
	if (( ${__VER%%.*} > ${VER1%%.*} )) ; then
	$(yum install -y dnf-plugins-core -y)
	$(yum config-manager --set-enabled PowerTools)
	fi
    elif [ -f /etc/os-release ]; then
        . /etc/os-release
        case $ID in
            ubuntu)
                __OS="Ubuntu";;
            centos)
                __OS="CentOS";;
            rhel)
                __OS="RedHat";;
        esac
        __VER=$VERSION_ID
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        __OS=$DISTRIB_ID
        __VER=$DISTRIB_RELEASE
    else
        __OS=$(uname -s)
        __VER=$(uname -r)
    fi

    # Get OS Architecture
    if [ $(uname -m) == 'x86_64' ]; then
        __ARCH="amd64"
    else
        __ARCH="i386"
    fi

    eval $__res_os="'$__OS'"
    eval $__res_ver="'$__VER'"
    eval $__res_kernel="'$__KERNEL'"
    eval $__res_arch="'$__ARCH'"
}

# Check if file exists and not empty
# Input $1: file name
# Return Error and exit the exec
function fileSanityCheck {
    # Check if file exists
    if [ ! -f $1 ]; then
        logPrint "ERR" "File Not Found!" "$1"
    fi

    if [ ! -s $1 ]; then
        logPrint "ERR" "File is empty!" "$1"
    fi
}

# Get user confirmation of Y/n
# Input $1: message (optional)
# Return 0,1
function confirmYn {
    local __return_confirmYn=1

    [ "${FORCEYES}" = "false" ] && read -r -p "${1:-Do you want to continue? [Y/n] }" REPLY || REPLY="Y"
    if [[ ${REPLY} =~ ^[Yy] ]] || [[ -z "${REPLY}" ]]; then
        __return_confirmYn=0
    fi
    toLog "INFO" "${1:-Do you want to continue? [Y/n] }[${REPLY}]"
    return "$__return_confirmYn";
}

# Check if user has sudo or root privileges
# Return 0,1
function isSudo {
    if [ "$EUID" -ne 0 ]; then
        return 1;
    fi
    return 0;
}

# Check if program is installed
# Input $1: program name e.g. name:phu=version
# Return 0,1
function isPrgInstalled {
    # Init to found eq false
    # 0 means no failure and non-0 means failure.
    local __found=1
    local __pkg_name_isPrgInstalled
    local __pkg_vers_isPrgInstalled
    local __phu_isPrgInstalled
    local __cmd_array_isPrgInstalled=()

    # Extract the package handling utility
    parsePkg "$1" __pkg_name_isPrgInstalled __pkg_vers_isPrgInstalled __phu_isPrgInstalled

    # update value if found
    if [[ "${__phu_isPrgInstalled}" =~ "pip" ]]; then
        [ ! -z "$__pkg_vers_isPrgInstalled" ] && __pkg_vers_isPrgInstalled="Version: ${__pkg_vers_isPrgInstalled}" || __pkg_vers_isPrgInstalled="${__pkg_name_isPrgInstalled}"
        __cmd_array_isPrgInstalled=("sudo -u $SUDO_USER ${PYPI} show ${__pkg_name_isPrgInstalled} 2>/dev/null | grep '${__pkg_vers_isPrgInstalled}'"); # freeze doesn't work well
    else
        __cmd_array_isPrgInstalled=("type ${__pkg_name_isPrgInstalled}");
        runCmd __cmd_array_isPrgInstalled "ERR" 0 && __found=0 || {
            case $RET_DISTRO in
                CentOS | RedHat)
                    if [[ "${__phu_isPrgInstalled}" == "group" ]]; then
                        __cmd_array_isPrgInstalled=("yum grouplist installed '${__pkg_name_isPrgInstalled}' 2>/dev/null | grep -i '${__pkg_name_isPrgInstalled}'");
                    else
                        __cmd_array_isPrgInstalled=("${!RET_CMDS_ARRAY[RET_SEARCH_CMD]} ${__pkg_name_isPrgInstalled}");
                    fi;;
                Ubuntu)
                    __cmd_array_isPrgInstalled=("${!RET_CMDS_ARRAY[RET_SEARCH_CMD]} ${__pkg_name_isPrgInstalled} 2>/dev/null | grep -e '^ii'");;
            esac
        }
    fi
    [ "$__found" -eq 0 ] && return $__found;
    runCmd __cmd_array_isPrgInstalled "ERR" 0 && __found=0
    return $__found;
}



# Install package
# Input $1: package array
# Return 0,1
function installPkg {
    local -n __packages=$1
    local __cmd_ret_installPkg
    local __cmd_installPkg
    local __cmd_array_installPkg=()

    local __pkg_name_installPkg
    local __pkg_vers_installPkg
    local __phu_installPkg
    local __dep_installPkg

    # Check if the pkg array is not empty
    [ "${#__packages[@]}" -eq 0 ] && { logPrint "ERR" "Package array cannot be empty!" "installPkg" "${FAIL}"; exit; }

    startLoadBar "Preparing for Installation"
    # fix broken dependencies in place
    __cmd_array_installPkg=("${!RET_CMDS_ARRAY[RET_FIXBROKEN_CMD]}"); runCmd __cmd_array_installPkg "WARN"

    # Updates the package lists
    __cmd_array_installPkg=("${!RET_CMDS_ARRAY[RET_UPDATE_CMD]}"); runCmd __cmd_array_installPkg "WARN" "0"
    stopLoadBar

    for dep in "${__packages[@]}"; do
        # Init package args
        __cmd_installPkg=${!RET_CMDS_ARRAY[RET_INSTALL_CMD]}

        # Extract the package handling utility
        parsePkg "${dep}" __pkg_name_installPkg __pkg_vers_installPkg __phu_installPkg
        __dep_installPkg="${__pkg_name_installPkg}"

        if [ ! -z "$__pkg_vers_installPkg" ]; then
            if [[ "${__phu_installPkg}" =~ "pip" ]]; then
                __cmd_array_installPkg=("sudo -u $SUDO_USER ${PYPI} uninstall -y '${__dep_installPkg}'")
                runCmd __cmd_array_installPkg "ERR"
                __dep_installPkg+="==${__pkg_vers_installPkg}"; 
            else
                __dep_installPkg+="=${__pkg_vers_installPkg}"
            fi
        fi

        [[ "${__phu_installPkg}" =~ "pip" ]] && __cmd_installPkg="sudo -u $SUDO_USER ${PYPI} install --user" #sudo pip isn't encouraged
        [[ "${__phu_installPkg}" == "group" ]] && __cmd_installPkg="yum groupinstall -y"

        startLoadBar "Installing Package: ${__dep_installPkg}"
        __cmd_array_installPkg=("${__cmd_installPkg} '${__dep_installPkg}'"); runCmd __cmd_array_installPkg "ERR"
        logPrint "DET" "${__dep_installPkg}" "${CLEAR}Installed" "${SUCC}"
    done

    # Clean Archives cache
    __cmd_array_installPkg=("${!RET_CMDS_ARRAY[RET_CLEAN_CMD]}"); runCmd __cmd_array_installPkg "WARN"

    stopLoadBar "The Installation Completed Successfully."
    return 0;
}

# Parse and return name, version and package handling utility from package str
# Input $1: package title/name e.g. name:phu=version
# Output $2: package name
# Output $3: package version
# Output $4: package phu
function parsePkg {
    local __pkg_parsePkg=$1
    local __res_pkg_name_parsePkg=$2
    local __res_pkg_vers_parsePkg=$3
    local __res_phu_parsePkg=$4

    local __pkg_name_parsePkg
    local __pkg_vers_parsePkg
    local __phu_parsePkg

    case "$__pkg_parsePkg" in
        *:*=*) # name:phu=version
            __pkg_name_parsePkg=$(echo "${__pkg_parsePkg}" | sed -n 's|^\(.*\):\(.*\)\(=.*\)|\1|p')
            __phu_parsePkg=$(echo "${__pkg_parsePkg}" | sed -n 's|^\(.*\):\(.*\)\(=.*\)|\2|p')
            __pkg_vers_parsePkg=$(echo "${__pkg_parsePkg}" | sed -n 's|^\(.*\):\(.*\)=\(.*\)|\3|p')
        ;;

        *:*) # name:phu
            __pkg_name_parsePkg=$(echo "${__pkg_parsePkg}" | sed -n 's|^\(.*\):\(.*\)|\1|p')
            __phu_parsePkg=$(echo "${__pkg_parsePkg}" | sed -n 's|^\(.*\):\(.*\)|\2|p')
            __pkg_vers_parsePkg="" # empty
        ;;

        *=*) # name=version
            __pkg_name_parsePkg=$(echo "${__pkg_parsePkg}" | sed -n 's|^\(.*\)=\(.*\)|\1|p')
            __phu_parsePkg=""      # empty
            __pkg_vers_parsePkg=$(echo "${__pkg_parsePkg}" | sed -n 's|^\(.*\)=\(.*\)|\2|p')
        ;;

        *) # name
            __pkg_name_parsePkg="${__pkg_parsePkg}"
            __phu_parsePkg=""      # empty
            __pkg_vers_parsePkg="" # empty
        ;;
    esac

    eval $__res_pkg_name_parsePkg='$__pkg_name_parsePkg'
    eval $__res_phu_parsePkg='$__phu_parsePkg'
    eval $__res_pkg_vers_parsePkg='$__pkg_vers_parsePkg'
}

# Remove package
# Input $1: package array
# Return 0,1
function removePkg {
    local -n __packages_removePkg=$1
    local __cmd_ret_removePkg
    local __cmd_removePkg
    local __cmd_array_removePkg=()
    local __rm_msg_removePkg
    local __pkg_name_removePkg
    local __pkg_vers_removePkg
    local __phu_removePkg
    local __dep_removePkg

    for dep in "${__packages_removePkg[@]}"; do
        __cmd_removePkg=${!RET_CMDS_ARRAY[RET_REMOVE_CMD]}
        __rm_msg_removePkg="Uninstalled"

        # Extract the package handling utility
        parsePkg "${dep}" __pkg_name_removePkg __pkg_vers_removePkg __phu_removePkg
        __dep_removePkg="${__pkg_name_removePkg}${__pkg_vers_removePkg}"

        [[ "${__phu_removePkg}" =~ "pip" ]] && __cmd_removePkg="${PYPI} uninstall -y"
        [[ "${__phu_removePkg}" == "group" ]] && __cmd_removePkg="groupremove -y"

        startLoadBar "Uninstalling Package: ${__dep_removePkg}"

        if isPrgInstalled "${__dep_removePkg}:${__phu_removePkg}"; then
            __cmd_array_removePkg=("${__cmd_removePkg} ${__dep_removePkg}")
            runCmd __cmd_array_removePkg "ERR"
        else
            __rm_msg_removePkg="Already uninstalled"
        fi

        logPrint "DET" "${__dep_removePkg}" "${CLEAR}${__rm_msg_removePkg}" "${SUCC}"
    done

    stopLoadBar "The Uninstallation Completed Successfully."
    return 0;
}

# Check if command return error
# Input $1: Return State
# Input $2: The cmd causing the error
# Input $3: Error type [ERR (stop the execution), WARN (only show the warning an keep running)]
# Input $4: The output message
function checkReturn {
    local __state=$1
    local __cmd=$2
    local __err_type_checkReturn="${3:-ERR}"
    local __err_msg="${4:-An error occurred while executing the command!}"

    if [ "$__state" -ne 0 ]; then
        logPrint "$__err_type_checkReturn" "$__err_msg" "$__cmd"
        return "$__state";
    fi
    return 0;
}

# Install Necessary Packages and
# read YAML file
function preRequirement {
    local __necessary_packages=("git" "tee" "curl" "wget" "lynx" "sed" "gawk" "rpm" "ssh")
    
    checkDeps __necessary_packages "" "Run Pre-installation Requirements"
    if [ "${#__necessary_packages[@]}" -ne 0 ]; then
        if (confirmYn "Install dependencies? [Y/n] "); then 
            installPkg __necessary_packages
        else
            logPrint "ERR" "Packages are required to complete this setup!" "$(printf "%s " "${__necessary_packages[@]}")"
        fi
    fi

    # read yaml file
    yaml2arr "$REQ_FILE" YAML_ARRAY
    #echo "${YAML_ARRAY[@]}"

    # Get Version and Description of this script
    getYAMLValue "version" YAML_ARRAY VERSION
    getYAMLValue "description" YAML_ARRAY DESCRIPTION
}

# Load bar while running a command
# Input $1: Message text
# Input $2: Message type
# Input $3: Load bar position (Optional)
function loadBar {
    local __msg_loadbar="$1"
    local __msg_type_loadbar="${2:-SUBSTEP}"
    local __pos_loadbar="${3:-0}"
    tput civis

    while true
    do
        for (( i=${__pos_loadbar}; i<${#LOADBAR[@]}; i++ )); do
            logPrint "${__msg_type_loadbar}" "${CLEAR}${LOADBAR[$i]} ${__msg_loadbar}"
            sleep 0.1;
        done
    done
}

# Start load bar
# Input $1: Message text
# Input $2: Load bar position (Optional)
function startLoadBar {
    stopLoadBar >/dev/null 2>&1 # Stop previous process if exists
    loadBar "$1" "SUBSTEP" "$2" &
    LOADBARPID=$!
}

# Stop loader
# Input $1: Message text
# Input $2: Stop state
# Input $3: Message Value (Optional)
function stopLoadBar {
    local __msg_stopLoadBar="$1"
    local __msg_type_stopLoadBar="${2:-DONE}"
    local __msg_value_stopLoadBar="$3"
    tput cnorm

    kill -9 "${LOADBARPID}" >/dev/null 2>&1 # send SIGKILL
    wait "${LOADBARPID}" >/dev/null 2>&1
    [ -z "${__msg_stopLoadBar}" ] || logPrint "${__msg_type_stopLoadBar}" "${__msg_stopLoadBar}" "${__msg_value_stopLoadBar}"
}

# Stop all process befor exit this program
# Input $1: exit code
function exitAll {
   stopLoadBar; echo
   exit $1
}

# Check system requirements
function checkSys {
    local __deps_array_checkSys=()
    local __vers_array_checkSys=()

    # Check OS
    checkOs

    # Check Global Dependencies
    getYAMLValue "dependencies|globale|name" YAML_ARRAY DEPS_ARRAY
    getYAMLValue "dependencies|globale|name|version" YAML_ARRAY VER_ARRAY
    __deps_array_checkSys=("${DEPS_ARRAY[@]}")
    __vers_array_checkSys=("${VER_ARRAY[@]}")

    # Check Distro Dependencies
    getYAMLValue "dependencies|globale|$RET_DISTRO|name" YAML_ARRAY DEPS_ARRAY
    getYAMLValue "dependencies|globale|$RET_DISTRO|name|version" YAML_ARRAY VER_ARRAY
    __deps_array_checkSys+=("${DEPS_ARRAY[@]}")
    __vers_array_checkSys+=("${VER_ARRAY[@]}")

    # Exclude Kernel-* if in Container
    [ "${INCONTAINER}" = "true" ] && { removeFromArray "kernel-" __deps_array_checkSys __vers_array_checkSys; }

    checkDeps __deps_array_checkSys __vers_array_checkSys
    if [ "${#__deps_array_checkSys[@]}" -ne 0 ]; then
        if (confirmYn "Install dependencies? [Y/n] "); then 
            [[ $RET_DISTRO == "RedHat" ]] && prepareRhel
            installPkg __deps_array_checkSys
        else
            logPrint "ERR" "Packages are required to complete this setup!" "$(printf "%s " "${__deps_array_checkSys[@]}")"
        fi
    fi
}

# Check if system reboot required
# Input $1: 0/1 value to force reboot required (Optional)
# Input $2: reboot requestor (Optional)
function isRebootRequired {
    local __reboot_requestor_isRebootRequired="${2:-RET}"
    local __cmd_array_isRebootRequired=()

    if [ -f /var/run/reboot-required ]; then
       logPrint "DONE" "Reboot Required! Please run this script after the reboot."
       exitAll 7

    elif [ "$1" = 1 ]; then
        __cmd_array_isRebootRequired=("echo ${__reboot_requestor_isRebootRequired} | tee -a /var/run/reboot-required"); runCmd __cmd_array_isRebootRequired "ERR" 0 && __found=0
        logPrint "DONE" "Reboot Required! Please run this script after the reboot."
        exitAll 7
    fi
}

# Edit File in place. Support pattern matching
# Input $1: file name
# Input $2: new value
# Input $3: old value
function editFile {
    local __file_name_editFile=$1
    local __old_value_editFile=$2
    local __new_value_editFile=$3

    local __cmd_array_editFile=("su -p $SUDO_USER -c \"sed -i -e 's|${__old_value_editFile}|${__new_value_editFile}|g' ${__file_name_editFile}\"")
    runCmd __cmd_array_editFile "ERR" "1" "Cannot edit file: ${__file_name_editFile}"
}

# Init the log file
function initLog {
    local __msg_initLog="${1:-START SCRIPT}"

    # Creat log directory
    su -p $SUDO_USER -c "mkdir '${LOG_DIRECTORY}'" >/dev/null 2>&1

    # re-create the log file
    su -p $SUDO_USER -c "rm -f $LOG_FILE" >/dev/null 2>&1
    su -p $SUDO_USER -c "touch $LOG_FILE" >/dev/null 2>&1

    # Init Header
    su -p $SUDO_USER -c "echo '=========================================================================' > $LOG_FILE"
    su -p $SUDO_USER -c "echo '                          ROCm Enablement Tool Log                       ' >> $LOG_FILE"
    su -p $SUDO_USER -c "echo '=========================================================================' >> $LOG_FILE"
    su -p $SUDO_USER -c "echo ''                                                                          >> $LOG_FILE"

    # Add the first msg after header
    toLog "INFO" "${__msg_initLog} [USER: $SUDO_USER]"
    toLog "INFO" "${TEMP_DIRECTORY} [tmp Path]"
}

# Insert log message to the log file
# Input $1: log state INFO, ERROR, WARNING, etc.
# Input $2: log message
function toLog {
    local __state_toLog="$1"
    local __msg_toLog="$2"

    if [ "${PREVIEWLOGMESG:9}" != "${__msg_toLog:9}" ]; then
        su -p $SUDO_USER -c "echo \"`date '+[%Y.%m.%d  @ %H:%M:%S:%N]'` [${__state_toLog:0:3}] ${__msg_toLog}\" >> $LOG_FILE" >/dev/null 2>&1
        PREVIEWLOGMESG="${__msg_toLog}"
    fi
}

# Download file from URL
# NOTE: Can be used with older bash < 4.3. runCmd requires bash >= 4.3 and can thus 
# not be used to replace this function in all scenarios.
# Input $1: URL
# Input $2: Output Path
# Input $3: Error type [ERR (stop the execution), WARN (only show the warning an keep running)]
# Input $4: Message text
function downloadFile {
    local __err_type_downloadFile=$3
    local __cmd_ret_downloadFile
    local __msg_txt_downloadFile=${4:-"Download file"}

    # Read terminal output and pass it to loadBar
    function updatePercentage {
        local __download_per
        local __LoadBar_Pos=0
        local __succ_updatePercentage=1
        local __previous_value_updatePercentage="${__download_per}"

        while read __download_per
        do
            if [ "${__download_per}" != "${__previous_value_updatePercentage}" ]; then
                ((__LoadBar_Pos++)); __LoadBar_Pos=$((__LoadBar_Pos % ${#LOADBAR}))
                startLoadBar "${__msg_txt_downloadFile}: ${__download_per}" ${__LoadBar_Pos}
                __previous_value_updatePercentage="${__download_per}"
                __succ_updatePercentage=0
            fi
        done
        [ $__succ_updatePercentage -eq 0 ] && stopLoadBar "Download Finished!" || stopLoadBar
        return $__succ_updatePercentage;
    }

    # Download file and get the current download state
    su -p $SUDO_USER -c "wget --progress=dot -P '$2' '$1' 2>&1 | grep --line-buffered '[[:space:]][[:digit:]][[:digit:]]*%' | sed -u -e 's|.* \([0-9]\+[0-9]*\%\).*|\1|g'" | updatePercentage

    # Check the return state
    __cmd_ret_downloadFile="$?"
    checkReturn "$__cmd_ret_downloadFile" "wget -P $2 $1" "${__err_type_downloadFile}" "There was a problem downloading this package!"
}

# Check Bash Version and Update it if requiered
function checkBashVersion {
    local __bash_ver
    local __path_checkBashVersion
    local __file_extension="tar.gz"
    local __cmd_ret_checkBashVersion
    local __retPath_checkBashVersion=$(pwd)
    local __cmd_array_checkBashVersion=()

    # Compare version need command line calculator
    startLoadBar "Check Bash Version"
    ${!RET_CMDS_ARRAY[RET_INSTALL_CMD]} bc >/dev/null 2>&1
    __cmd_ret_checkBashVersion="$?"
    checkReturn "$__cmd_ret_checkBashVersion" "${!RET_CMDS_ARRAY[RET_INSTALL_CMD]} bc" "ERR"

    __bash_ver=$(bash --version | sed -n 's|^.*version \([0-9]*.[0-9][0-9]*\).*|\1|p')
    stopLoadBar
    [ $(echo "$__bash_ver >= $REQ_BASH_VERSION"|bc) -eq 1 ] && return 0

    # Install required packages
    ${!RET_CMDS_ARRAY[RET_INSTALL_CMD]} gcc wget make which >/dev/null 2>&1
    __cmd_ret_checkBashVersion="$?"
    checkReturn "$__cmd_ret_checkBashVersion" "${!RET_CMDS_ARRAY[RET_INSTALL_CMD]} bc" "WARN"

    # Get bash location and Create bash Backup
    __path_checkBashVersion=$(which bash)
    cp "$__path_checkBashVersion" "$__path_checkBashVersion.$__bash_ver.old" >/dev/null 2>&1
    __cmd_ret_checkBashVersion="$?"
    checkReturn "$__cmd_ret_checkBashVersion" "cp $__path_checkBashVersion $__path_checkBashVersion.$__bash_ver.old" "ERR"

    # Confirmation message
    logPrint "STEP" "Update Bash Version"
    logPrint "NOTE" "This Script Require Bash Version >= $REQ_BASH_VERSION. The Current Version is $__bash_ver\n       A Backup is Created From The Current Version $__bash_ver                   "
    confirmYn "Update to $BASH_FILENAME? [Y/n] " || logPrint "ERR" "Update Bash: The Current Bash Version is Not Supported!" "$__bash_ver" "${FAIL}"

    # Download and extract the bash package
    downloadFile "$BASH_URL$BASH_FILENAME.$__file_extension" "$TEMP_DIRECTORY" "ERR" "Download $BASH_FILENAME"

    tar zxvf "$TEMP_DIRECTORY/$BASH_FILENAME.$__file_extension" -C "$TEMP_DIRECTORY" >/dev/null 2>&1
    __cmd_ret_checkBashVersion="$?"
    checkReturn "$__cmd_ret_checkBashVersion" "tar zxvf $TEMP_DIRECTORY/$BASH_FILENAME.$__file_extension -C $TEMP_DIRECTORY" "ERR"

    # Install the new bash version
    startLoadBar "Install $BASH_FILENAME"

    cd "$TEMP_DIRECTORY/$BASH_FILENAME"
    ./configure >/dev/null 2>&1
    __cmd_ret_checkBashVersion="$?"
    checkReturn "$__cmd_ret_checkBashVersion" "./configure" "ERR"

    make >/dev/null 2>&1
    __cmd_ret_checkBashVersion="$?"
    checkReturn "$__cmd_ret_checkBashVersion" "make" "ERR"

    cp -f "bash" "$__path_checkBashVersion" >/dev/null 2>&1
    __cmd_ret_checkBashVersion="$?"
    checkReturn "$__cmd_ret_checkBashVersion" "cp -f bash $__path_checkBashVersion" "ERR"

    # Check the installation
    ls -la bash >/dev/null 2>&1
    __cmd_ret_checkBashVersion="$?"

    # Back to the RET folder
    cd "$__retPath_checkBashVersion"

    [ $__cmd_ret_checkBashVersion -ne 0 ] && stopLoadBar "There was a problem installing $BASH_FILENAME!" "ERR" "make -C $TEMP_DIRECTORY/$BASH_FILENAME" \
                                      || stopLoadBar "Update Completed Successfully."

    # Feedback info: The location of the old version, the current version
    logPrint "NOTE" "A Backup Of The Previous Version Can Be Found Here: $__path_checkBashVersion.$__bash_ver.old"
    __bash_ver=$(bash --version | sed -n 's|^.*version \([0-9]*.[0-9][0-9]*\).*|\1|p')
    logPrint "NOTE" "The Current Bash Version is: $__bash_ver"

    # Restart this script
    $0 $ret_args; exit 0;
}

# Run Command and check the return value
# Input $1: Command Array (cmd + args)
# Input $2: Error type [ERR (stop the execution), WARN (only show the warning an keep running)]
# Input $3: Ignore Check Process [Default 1]
# Input $4: Message (Optional)
# Input $5: Update MSG [Default 1]
function runCmd {
    local -n __cmd_runCmd="$1"
    local __err_type_runCmd="$2"
    local __ignore_check_runCmd="${3:-1}"
    local __msg_runCmd="${4:-$__cmd_runCmd}"
    local __update_msg_runCmd="${5:-1}"
    local __cmd_ret_runCmd
    local __pid_runCmd

    [ "${#__cmd_runCmd[@]}" -eq 0 ] && logPrint "ERR" "Command Cannot Be Empty!" "runCmd"
    if [ "${__cmd_runCmd}" != "$RET_IGNORE_CMD" ]; then
        toLog "CMD" "${__cmd_runCmd[@]} [runCmd]"

        eval "${__cmd_runCmd[@]}" &> >(treatStdout "$__update_msg_runCmd" "$__msg_runCmd")
        __cmd_ret_runCmd="$?"

        __pid_runCmd=$!; wait "$__pid_runCmd" >/dev/null 2>&1 # Wait for command to finish 
        [ "${__ignore_check_runCmd}" -eq 1 ] && checkReturn "$__cmd_ret_runCmd" "${__cmd_runCmd[@]}" "$__err_type_runCmd" || return "${__cmd_ret_runCmd}"
    fi
}

# Treat Stdout and pass it to toLog function.
# Input $1: Update MSG [Default 1]
# Input $2: Message (Optional)
function treatStdout {
    local __update_msg_treatStdout="${1:-1}"
    local __msg_treatStdout="${2:-Command progress}"
    local __line_treatStdout
    local __LoadBar_Pos=0
    local __succ_treatStdout=1
if [ -t 0 ]; then
    echo running interactivelly
fi
    while read __line_treatStdout
    do
        if [ "${DEBUG}" = "true" ]; then
            echo "${__line_treatStdout}"
        elif [ "$__update_msg_treatStdout" -eq 0 ]; then
                __progress_per=$(echo "${__line_treatStdout}" 2>&1 | grep -o --line-buffered '[[:space:]]*[[:digit:]][[:digit:]]*%' | sed -u -e 's|.* \([0-9]\+[0-9]*\%\).*|\1|g') 
                if [ "${__progress_per}" != "${__previous_value_treatStdout}" ] && [ ! -z "${__progress_per}" ]; then
                    ((__LoadBar_Pos++)); __LoadBar_Pos=$((__LoadBar_Pos % ${#LOADBAR[@]}))
                    startLoadBar "$__msg_treatStdout: ${__progress_per}" ${__LoadBar_Pos}
                    __previous_value_treatStdout="${__progress_per}"   
                    __succ_treatStdout=0
                fi  
        fi
        toLog "OUT" "${__line_treatStdout}"
    done
    [ $__succ_treatStdout -eq 0 ] && stopLoadBar
}

# Check what distro
function updateCmd {
    local __kernel_updateCmd
    local __arch_updateCmd

    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        getOSInfo RET_DISTRO RET_RELEASE __kernel_updateCmd __arch_updateCmd

        case $RET_DISTRO in
            CentOS | RedHat)
                updateCmdArray "COS";;
            Ubuntu)
                ;; # per default initialized
            *) logPrint "ERR" "Distro Not Supported!" "$RET_DISTRO" "${FAIL}";;
        esac
    else
        logPrint "ERR" "OS Not Supported!" "$OSTYPE" "${FAIL}"
    fi
}

# Preparing RHEL for installation
function prepareRhel {
    local __cmd_array_prepareRhel=()
    local __repo1_array_prepareRhel="rhel-server-rhscl-7-rpms"
    local __repo2_array_prepareRhel="rhel-7-server-optional-rpms"
    local __repo3_array_prepareRhel="rhel-7-server-extras-rpms"

    startLoadBar "Preparing RHEL for installation"

    # Check if repo already enabled
    __cmd_array_prepareRhel=("yum repoinfo ${__repo1_array_prepareRhel} 2>/dev/null | grep -ie '^Repo-status.*enabled$'")
    runCmd __cmd_array_prepareRhel "ERR" 0 || { __cmd_array_prepareRhel=("subscription-manager repos --enable ${__repo1_array_prepareRhel}"); runCmd __cmd_array_prepareRhel "ERR"; }

    __cmd_array_prepareRhel=("yum repoinfo ${__repo2_array_prepareRhel} 2>/dev/null | grep -ie '^Repo-status.*enabled$'")
    runCmd __cmd_array_prepareRhel "ERR" 0 || { __cmd_array_prepareRhel=("subscription-manager repos --enable ${__repo2_array_prepareRhel}"); runCmd __cmd_array_prepareRhel "ERR"; }

    __cmd_array_prepareRhel=("yum repoinfo ${__repo3_array_prepareRhel} 2>/dev/null | grep -ie '^Repo-status.*enabled$'")
    runCmd __cmd_array_prepareRhel "ERR" 0 || { __cmd_array_prepareRhel=("subscription-manager repos --enable ${__repo3_array_prepareRhel}"); runCmd __cmd_array_prepareRhel "ERR"; }

    stopLoadBar
}

# Update the command by distro
# Input $1: Distro Prefix
function updateCmdArray {
    local __distro_updateCmdArray="$1"
    local __cmd_name_updateCmdArray

    for ((i=0; i<"${#RET_CMDS_ARRAY[@]}"; i++)); do
        __cmd_name_updateCmdArray="${RET_CMDS_ARRAY[i]}"
        RET_CMDS_ARRAY[i]="$__distro_updateCmdArray""_${__cmd_name_updateCmdArray#*_}"
    done
}

# Run pre-Start setup
function preStart {
    # Clear the terminal
    tput clear

    # Update commands by distro
    updateCmd

    # Update Bash version if required
    checkBashVersion
}
